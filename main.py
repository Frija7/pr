import telebot
from telebot import types
from keras.models import load_model
from PIL import Image, ImageOps
import numpy as np

bot = telebot.TeleBot("Token")

advices = {
    "–ø–ª–∞—Å—Ç–∏–∫": "–ü–ª–∞—Å—Ç–∏–∫ –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.",
    "—Å—Ç–µ–∫–ª–æ": "–°—Ç–µ–∫–ª–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤ –ø—É–Ω–∫—Ç–∞—Ö –ø—Ä–∏–µ–º–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–∫–∞—Ö.",
    "–º–µ—Ç–∞–ª–ª": "–ú–µ—Ç–∞–ª–ª–æ–ª–æ–º –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö.",
    "–±—É–º–∞–≥–∞": "–ú–∞–∫—É–ª–∞—Ç—É—Ä—É —Å–¥–∞–≤–∞–π—Ç–µ –≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —Å—É—Ö–æ–π –∏ —á–∏—Å—Ç–æ–π.",
    "–æ—Ä–≥–∞–Ω–∏–∫–∞": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫–æ–º–ø–æ—Å—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ",
    "–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã": "–≠—Ç–æ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å."
}


def bot_classif(image_path):
        np.set_printoptions(suppress=True)

        model = load_model("keras_model.h5", compile=False)
        class_names = open("labels.txt", "r", encoding='utf-8').readlines()

        data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

        image = Image.open(image_path).convert("RGB")

        size = (224, 224)
    
        image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
    
        image_array = np.asarray(image)
    
        normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
    
        data[0] = normalized_image_array
    
        prediction = model.predict(data)
        index = np.argmax(prediction)
        class_name = class_names[index]
        confidence_score = prediction[0][index]
    
        return class_name[2:-1], float(prediction[0][index])


def get_waste_advice(waste_type):
     waste_type = waste_type.lower()

     if waste_type in advices:
          return advices[waste_type]
     

@bot.message_handler(commands=['start'])
def send_hello(message):
    bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç, —è EcoVisionBot, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞ –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Ç–∏–ø, –∏ —Ä–∞—Å—Å–∫–∞–∂—É —Å–ø–æ—Å–æ–± –µ–≥–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")


@bot.message_handler(content_types=['photo'])

def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file_name = file_info.file_path.split("/")[-1]
    downloaded_file = bot.download_file(file_info.file_path)
    
    with open(file_name, "wb") as new_file:
        new_file.write(downloaded_file)
        class_names, confidence_score = bot_classif(file_name)
        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\nüìå –¢–∏–ø –æ—Ç—Ö–æ–¥–∞: {class_names}\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å: {confidence_score}\nüí° –°–æ–≤–µ—Ç –ø–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {get_waste_advice(class_names)}"
        bot.reply_to(message, response)
    

bot.infinity_polling()
